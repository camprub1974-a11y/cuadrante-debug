rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUNCIONES DE AYUDA (se mantienen, son una buena práctica) ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == "admin";
    }

    function isSupervisor() {
      return isSignedIn() && request.auth.token.role == "supervisor";
    }

    function isMando() {
      return isAdmin() || isSupervisor();
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // --- REGLAS ESTRICTAS POR COLECCIÓN ---

    // Colección de Usuarios: Solo el dueño o un admin pueden leer. Solo un admin puede escribir.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
    }

    // Colección de Agentes: Cualquiera puede leer la lista, pero solo admins pueden modificarla.
    match /agents/{agentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Configuración: Solo para administradores.
    match /configuration/{docId} {
      allow read, write: if isAdmin();
    }

    // Cuadrantes: Cualquiera puede leerlos, solo admins pueden modificarlos.
    match /schedules/{scheduleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Registros Electrónicos: La regla más importante.
    match /registros/{registroId} {
      allow read: if isSignedIn();
      
      // Un usuario puede crear un registro si se identifica como el creador.
      allow create: if isSignedIn() && request.resource.data.createdByUid == request.auth.uid;
      
      // Solo el creador original o un admin pueden actualizar.
      allow update: if isAdmin() || resource.data.createdByUid == request.auth.uid;
      
      // La eliminación (soft delete) es solo para administradores.
      allow delete: if isAdmin();
    }
    
    // --- REGLAS PARA IDENTIFICACIONES (MODIFICADAS SEGÚN TU PETICIÓN) ---
// Cualquiera puede leer, crear y actualizar. Solo admins pueden borrar.

match /personas/{personaId} {
  allow read, create, update: if isSignedIn();
  allow delete: if isAdmin();
}

match /vehiculos/{vehiculoId} {
  allow read, create, update: if isSignedIn();
  allow delete: if isAdmin();
}

match /establecimientos/{establecimientoId} {
  allow read, create, update: if isSignedIn();
  allow delete: if isAdmin();
}
    // Plantillas: Cualquiera puede leerlas, solo admins pueden modificarlas.
    match /documentTemplates/{templateId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Croquis: Se permite crear a cualquiera. Leer, editar y borrar es para el dueño o un admin.
    match /sketches/{sketchId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin() || resource.data.createdByUid == request.auth.uid;
    }

    // El resto de tus reglas para solicitudes, partes, etc., ya eran bastante específicas
    // y siguen un buen patrón, por lo que se mantienen.
    match /permissionTypes/{typeId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /markedDates/{dateId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /solicitudes/{solicitudId} {
      allow read: if isMando() || isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }
    match /solicitudes_cambio_turno/{changeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isMando() || request.auth.token.agentId == resource.data.targetAgentId;
      allow delete: if isAdmin();
    }
    match /extraordinaryServices/{serviceId} {
      allow read: if isMando() || request.auth.token.agentId == resource.data.agentId;
      allow create, update: if request.auth.token.agentId == request.resource.data.agentId;
      allow delete: if isAdmin() || request.auth.token.agentId == resource.data.agentId;
    }
    match /serviceOrders/{orderId} {
      allow read: if isMando() || (request.auth.token.agentId in resource.data.assigned_agents);
      allow write: if isMando();
    }
    match /serviceReports/{reportId} {
      function isAssigned() {
        return request.auth.token.agentId in resource.data.assigned_agents;
      }
      allow read: if isMando() || isAssigned();
      allow create: if isSignedIn();
      allow update: if (isMando() || isAssigned()) && resource.data.status != 'validated';
      allow delete: if isMando();

      match /requerimientos/{reqId} {
        allow read, write: if isMando() || isAssigned();
      }
    }
  }
}